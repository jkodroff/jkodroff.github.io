<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<<<<<<< HEAD
  <title><![CDATA[Josh Kodroff, Code Craftsman]]></title>
  <link href="http://jkodroff.github.io/atom.xml" rel="self"/>
  <link href="http://jkodroff.github.io/"/>
  <updated>2015-07-26T18:27:45-04:00</updated>
  <id>http://jkodroff.github.io/</id>
  <author>
    <name><![CDATA[Josh Kodroff]]></name>
=======
  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://jkodroff.github.io/atom.xml" rel="self"/>
  <link href="http://jkodroff.github.io/"/>
  <updated>2015-07-25T10:10:18-04:00</updated>
  <id>http://jkodroff.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
>>>>>>> 37f8f9c359ab71de61fd5cada666254f254e6537
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
<<<<<<< HEAD
  <entry>
    <title type="html"><![CDATA[Getting More Inolved With OSS via Up for Grabs]]></title>
    <link href="http://jkodroff.github.io/2015/06/11/getting-more-inolved-with-oss-via-up-for-grabs/"/>
    <updated>2015-06-11T00:00:00-04:00</updated>
    <id>http://jkodroff.github.io/2015/06/11/getting-more-inolved-with-oss-via-up-for-grabs</id>
    <content type="html"><![CDATA[<p>I attended the <a href="http://dotnetfringe.org/">DotNetFringe</a> conference in Portland in April, and I met some some fantastic people, learned a ton, and had an overall great time. The conference was focused on open source in the .NET ecosystem, and I&#8217;m definitely an advocate for both of those things.</p>

<p>While I&#8217;ve been a consumer of much open source software for a long time, <a href="https://github.com/jkodroff">I&#8217;m not where I&#8217;d like to be in terms of giving back to the community</a> (i.e. there ain&#8217;t a lot of green on my contrib chart at the time of writing this post). I want that to change, so I&#8217;m committing (pun sorta-intentional) to doing 1 pull request per month for projects on <a href="http://up-for-grabs.net/#/">Up For Grabs</a> projects.</p>

<p>And what is Up for Grabs? Up For Grabs is a project created by <a href="https://lostechies.com/keithdahlby/">Keith Dahlby</a> of <a href="http://dahlbyk.github.io/posh-git/">posh-git</a> fame. Basically, you add your project to a manifest of open source projects and associate a GitHub issue tag with what I like to call &#8220;shovel-ready&#8221; issues: issues which the maintainers have oked so you know that the PR is likely to be approved. I think this is a fantastic idea and really helps lower the barrier to entry for becoming an OSS contributor.</p>

<p>If you&#8217;re a project maintainer, you should list your project with Up For Grabs. If you want to get more involved as a contributor, you should gind some issues on Up For Grabs. Big thanks to Keith for making this happen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Josh Test &#8211; a Sorta-Objective Way to Analyze New Opportunities]]></title>
    <link href="http://jkodroff.github.io/2014/02/08/the-josh-test-a-sorta-objective-way-to-analyze-new-opportunities/"/>
    <updated>2014-02-08T00:00:00-05:00</updated>
    <id>http://jkodroff.github.io/2014/02/08/the-josh-test-a-sorta-objective-way-to-analyze-new-opportunities</id>
    <content type="html"><![CDATA[<p>I find myself in the incredibly fortunate position of having a skill set that is greatly in demand. I get calls and emails on a near-daily basis from recruiters for all types of jobs. (If you don&#8217;t think that having recruiters contact you on a daily basis is a good problem to have, I would advise you to consider the employment circumstances of anyone else who is not a medical or IT professional, i.e. the other 99.999% of the world.) While there&#8217;s a lot to like about my current position, it would be foolish to be closed to new opportunities if the right one comes up. But how do I now what &#8220;the right opportunity&#8221; looks like? My answer: The Josh Test.</p>

<p>In August of 2000, software blogging Godfather <a href="http://www.joelonsoftware.com/">Joel Spolsky</a> posted <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">a simple and quick 12-point checklist</a> to see if an organization is doing good development work. The points have become a little outdated with time, but it still remains a good yardstick to measure a software organization. I wanted to iterate on this concept so that I could devise a test for potential opportunities that I might come across.</p>

<p>What I came up with was a list of what I consider the key dimensions software job. Each dimension can be scored on a scale of 1 to X. X is higher for more important things, lower for less important things. Figuring out whether a position you&#8217;re considering is a significant upgrade is simple: run the test for your current position, run the test for the potential position and compare the totals.</p>

<p>Side note: unless there’s a big positive difference, I might advise staying put. &#8220;Grass is greener&#8221; and whatnot.</p>

<p>In addition, I&#8217;ve compiled a list of deal-breakers so that I know what positions are automatically out of consideration. It&#8217;s good to know what your personal boundaries are and to stick to them.</p>

<p>If you&#8217;re doing your own Josh Test (in which case it should be called the [Your name here] Test), adjust the point scales to your values: e.g. Maybe you don&#8217;t care about an office environment at all, but you need more money because you’ve got high-interest debt. In addition, it&#8217;s important that your renew your [Your name here] Test as your priorities change.</p>

<p>And without further ado, I present the Josh Test v1.0:</p>

<h2>Location: 7 point scale</h2>

<p>I live in Philadelphia and I really like this city. My family and friends live here, I&#8217;m in a band, and so moving to another town (especially one where I don&#8217;t know anyone) would involve restarting my whole social life. That said, I&#8217;m open to positions in other locations that have the things that I value in my life outside of work: a vibrant arts and music scene, public parks, good public transit and bikeability, existing friends in town, and affordable living.</p>

<p>What would my commute to work be like? My current commute is perfect &#8211; a mile away, easily reached by bike, or on foot. If the weather is crappy, I can work from home or drive in and park for $7. On the other hand, I&#8217;ve worked a position where my commute was over an hour each way in traffic to a town I wanted nothing to do with once the workday was done and it was a miserable experience. Being easily reachable by public transit is another plus.</p>

<h2>Compensation: 7 point scale</h2>

<p>Is your pay comparable with the market rates? How about vacation? How about other perks?</p>

<p>Side note: I highly recommend the <a href="http://www.kalzumeus.com/2012/01/23/salary-negotiation/">Kalzumeus Blog’s entry on Salary Negotiation.</a></p>

<h2>Office Environment: 5 point scale</h2>

<p>My ideal office environment is clean, beautiful, has quiet places, and is conducive to collaboration and productivity. I find myself inspired to come to work and do my best when it&#8217;s obvious that the folks in charge have put effort into making a place that&#8217;s pleasant to spend a lot of time in.</p>

<p>I want to work on equipment (monitors, machines, software, etc) that are top notch because they are enjoyable to use and keep me productive. Considering the cost of developers vs. the cost of equipment, it&#8217;s always been a no-brainer to me that if you value your people you should get them whatever equipment they want within reason.</p>

<p>I want office furniture that&#8217;s sturdy and reasonably ergonomic. Forcing your employees to work with crappy desks or buying the cheapest possible chair at Ikea shows a disregard for your employees&#8217; health and happiness.</p>

<p>I find collaboration makes for more productivity and happiness. Is it easy to collaborate with my coworkers? Do you have the software (e.g. HipChat, Confluence, BaseCamp, etc.) and physical tools (shared spaces, whiteboards) that facilitate collaboration and openness?</p>

<p>If I need to concentrate because I need to think over some complicated technical task, is there a place for that? If I need to take a personal call during work hours (hey, it happens to us all sometimes) is there a place for that?</p>

<h2>Confidence in the product/company: 8 point scale</h2>

<p>If you make a product, is it one that I would choose, compared to the competition? Is its quality something I would be proud to show my friends? Does it deliver good value to the users?</p>

<p>As stated below, any product or client that does societal harm is out of the running, but do you do work for the common good? Do you serve public education? Non-profits committed to social good? Are you a university? A public institution? Knowing the work I do makes a key difference in someone&#8217;s well-being (and not just their bottom line) makes coming to work feel more meaningful.</p>

<p>The company matters too. Do I feel confident that the company will remain or become profitable? Do I feel that management knows what they’re doing in terms of the direction of the company? Is there a low attrition rate? You probably don’t want to be on a sinking ship, much less get on one voluntarily.</p>

<h2>My team/immediate coworkers: 10 point scale</h2>

<p>I’ve worked on teams where I could not trust my team members to do their work correctly and it sucked. I’ve also worked on teams where my trust was well-placed and it was great. If you’re up for positions of leadership, do your best to ensure that it’s the latter, but if it’s the former get an assurance from management that you can make the necessary personnel changes in due time, or get the expectations sufficiently lowered.</p>

<p>Are there people who are willing and able to mentor me in the technical and interpersonal skills I want to develop? Are there people who are willing and able to be mentored by me? I’ve learned as much from teaching as being taught and enjoy both.</p>

<h2>The work: 10 point scale</h2>

<p>Are you using technologies that I&#8217;m interested in? What are my prospects to improve and expand my skill set? In this business, if you&#8217;re not learning for an extended period of time you&#8217;re probably doing your career harm. Not irreparable harm, but you definitely don&#8217;t want to get too far behind.</p>

<p>Do you have career mentoring? Whatever your craft is, it&#8217;s a lot easier to master it with an experienced and trustworthy teacher. The same goes for developing interpersonal skills, which are at least as important. Likewise, I want to be supported by the organization in teaching my less experienced coworkers what I know and help them achieve their own career goals.</p>

<p>If my capabilities outgrow my responsibilities, are you going to be able to let me do for the organization what I&#8217;m most qualified to do? If my interests were to change, are you going to be able to give me work that is in line with those interests and the needs of the company?</p>

<p>Is the current quality of your code good (in the sense that it works well and has a low bug count)?</p>

<h2>My Automatic Deal Breakers (YMMV)</h2>

<p>These things make it easy to rule out potential positions:</p>

<ul>
<li>Products or clients that cause serious environmental or societal harm. For example, I have a personal precept that I will not do business with weapons manufacturers or major polluters. If you have similar rules (whatever they may be), make sure you stick by them. No job is worth violating a value you hold dearly.</li>
<li>Any indication of unscrupulous behavior. I can&#8217;t work with you if I can&#8217;t trust you to deal with me (or your clients) in good faith.</li>
<li>Positions in areas in which I don&#8217;t want to live. There&#8217;s no amount of money that&#8217;s worth it to move to an area where I won&#8217;t have the life I want outside of work.</li>
<li>Extensive use of technologies I intensely dislike working with with no mandate to change them soon. For example, I’m not willing to go back to editing stored procedures or dealing with WebForms markup all day if I’ve got better options. It also makes it hard to recruit good developers to be on your team.</li>
<li>Commute time longer than 45 minutes from someplace I would like to live. I&#8217;ve done it before and it wasn’t fun.</li>
</ul>


<h2>Conclusion</h2>

<p>The point values may change every few months. Maybe I visited Topeka, Kansas on vacation and I’m not so attached to the The City of Brotherly Love, so location doesn’t matter so much. (Hey, it could happen…) The Josh Test is just a rule of thumb (never let it overrule your intuition), but hopefully you can adapt it to your own situation and just maybe it’ll help you discover a great opportunity!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consistency Versus Innovation]]></title>
    <link href="http://jkodroff.github.io/2014/02/08/consistency-versus-innovation/"/>
    <updated>2014-02-08T00:00:00-05:00</updated>
    <id>http://jkodroff.github.io/2014/02/08/consistency-versus-innovation</id>
    <content type="html"><![CDATA[<p>At one of the places I&#8217;ve been employed in my career (an agency), there was a big emphasis on &#8220;consistency&#8221;. Our employees worked on multiple projects and the theory went that if all of our projects were consistent in their use of coding standards, tools, workflows, etc our productivity would increase and therefore our profits would likewise increase.</p>

<p>I would consider myself a good developer. When I see potential improvements in how software can be developed, then I want to incorporate that feedback into my process immediately and reap the results. That&#8217;s what agile is all about when you get down to it &#8211; gathering constant feedback, incorporating it into your process, and reaping the benefits of continuous improvement.</p>

<p>Rigid development processes are like recipes &#8211; they&#8217;re for novices so that they can keep themselves out of trouble. Your best developers, the (true) experts, the people who innovate and <a href="http://haacked.com/archive/2007/06/25/understanding-productivity-differences-between-developers.aspx">deliver the maximum value for your organization</a> are hampered by recipes. So why would you want to force a process upon your best developers which hampers their ability to solve problems?</p>

<p>One good answer might be that you charge the same hourly rate for all your employees and your novices bring your highest profit margins. If that&#8217;s the case, then your highest profit employees actually bring the least value to your customers and I&#8217;d suggest you consider differentiating your rates. You&#8217;ll be able to pay your best employees the most (because you&#8217;ll charge the most for them) and your best employees will deliver the most value (because their rates relative to their productivity provide the best value to clients). It&#8217;s a win-win.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It&#8217;s High Time to Make Windows Development Cheaper]]></title>
    <link href="http://jkodroff.github.io/2013/05/14/its-high-time-to-make-windows-development-cheaper/"/>
    <updated>2013-05-14T00:00:00-04:00</updated>
    <id>http://jkodroff.github.io/2013/05/14/its-high-time-to-make-windows-development-cheaper</id>
    <content type="html"><![CDATA[<p>At work, I use a MacBook Pro and boot into Windows directly using BootCamp. I tried using <a href="https://www.virtualbox.org/">VirtualBox</a> but key bindings not matching up drove me nuts and I was trying to get a project launched on a tight deadline, so I went with what I knew.</p>

<p>As a reward for launching said project, I got myself a nice new MacBook Pro for home use with a Retina screen, and 16 GB RAM. Professional tools for a professional developer and whatnot.</p>

<p>So I&#8217;m doing a little extra studying on <a href="http://tekpub.com/">TekPub</a> in my off-hours, watching <a href="http://tekpub.com/productions/nsb/1">Udi Dahan&#8217;s intro to NServiceBus</a>. I&#8217;ve never taken Udi&#8217;s course so I wanted to make sure I hadn&#8217;t missed anything that could make my work significantly easier.</p>

<p>Long story short, I found some code that I wanted to try out here at home so I start looking into what it would take for me to have my own legal copies of my work development environment. What I found did not make me very happy:</p>

<ol>
<li><a href="https://buy.parallels.com/329/purl-us-pd8f">Parallels Desktop for Mac 8: $79.99</a></li>
<li><a href="http://www.microsoftstore.com/store/msusa/en_US/pdp/productID.278119500?mr:referralID=a9233989-bd09-11e2-9dea-001b2166becc">Windows 8 Professional: $199.99</a></li>
<li><a href="http://www.microsoftstore.com/store/msusa/en_US/pdp/productID.254640600?mr:referralID=c120e554-bd09-11e2-9dea-001b2166becc">Visual Studio 2012 Professional: $499.99</a></li>
<li><a href="http://www.jetbrains.com/resharper/buy/index.jsp">ReSharper 7 Personal License: $199.99</a></li>
</ol>


<p>Total: <strong>$979.96</strong></p>

<p>So I&#8217;ll be out about a grand before I can set up a machine to do a little extra .NET learning at home? Ouch. Each of these by themselves isn&#8217;t terribly unreasonable (with the possible exception of Visual Studio) however, the problem is that in total it&#8217;s making it damn near impossible to continue to work with .NET (while obeying the license terms) in my spare time. If Microsoft wants to keep up with their open source competition for my development talent (for whatever that&#8217;s worth), then they need to get the cost down. <em>A lot.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnderSharp &#8211; Baby&#8217;s First NuGet Package!]]></title>
    <link href="http://jkodroff.github.io/2013/04/24/undersharp-babys-first-nuget-package/"/>
    <updated>2013-04-24T00:00:00-04:00</updated>
    <id>http://jkodroff.github.io/2013/04/24/undersharp-babys-first-nuget-package</id>
    <content type="html"><![CDATA[<p>I did something cool tonight (relatively speaking): I published my first NuGet package.</p>

<p>I&#8217;ve got these general-purpose extension methods that I find useful &#8211; stuff like <code>ForEach()</code> for collections and <code>ToFormat()</code> for strings &#8211; and I figured that if they&#8217;re that useful for me, they&#8217;re probably useful for other people as well. So, I decided to share.</p>

<p>The project is called UnderSharp. It&#8217;s designed to be to C# what <a href="http://underscorejs.org/">Underscore</a> is to JavaScript &#8211; some damn useful utility methods.</p>

<p>I&#8217;d love for you to check it out, give it a spin, and let me know what you think. And if you&#8217;re really inspired, <a href="https://github.com/jkodroff/UnderSharp/fork">fork me</a>!</p>

<ul>
<li><a href="https://nuget.org/packages/UnderSharp/">Get the package via NuGet</a></li>
<li><a href="https://github.com/jkodroff/UnderSharp">See the source code on GitHub</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD Lesson &#8211; Break Out Your CRUD]]></title>
    <link href="http://jkodroff.github.io/2013/04/21/ddd-lesson-break-out-your-crud/"/>
    <updated>2013-04-21T00:00:00-04:00</updated>
    <id>http://jkodroff.github.io/2013/04/21/ddd-lesson-break-out-your-crud</id>
    <content type="html"><![CDATA[<p>In my view, there&#8217;s 2 main principles that distinguish Domain-driven design as an approach to solving problems:</p>

<ol>
<li>All solutions to problems are framed in terms of the value delivered to the stakeholders for the effort required.</p></li>
<li>The core of the code is a model of the business process, and it <a href="https://en.wikipedia.org/wiki/Code_refactoring">evolves with time</a> as the  developers&#8217; understanding of the business with time.</li>
</ol>


<p>There&#8217;s other principles involved, but these two are the most relevant fo this particular post.</p>

<p>Sounds pretty generic, right?  So how do we implement this?  You may find, as I did, that direct advice (i.e. rules of thumb) on how to write domain-driven code is tough to find.  DDD is a very powerful technique for software development, but even though it&#8217;s has been popular for about 10 years now best practices are not yet widely understood.  There&#8217;s a long line of developers burned by DDD because they didn&#8217;t have a proper understanding of where domain models are appropriate.  They end up writing more code than they need to, and DDD gets a bad rap.  That&#8217;s a bummer because when it&#8217;s applied with wisdom, DDD really can make one&#8217;s life as a coder easier.</p>

<p>Let&#8217;s say we have the concept of an order in our domain. For simplicity&#8217;s sake, it takes 1 address for both billing and shipping.  All fields are required for the address.  It also has a status (InProgress, Placed, Shipped, or Cancelled) and we have some fairly intuitive rules about which status changes are valid (e.g. an order cannot be cancelled after it&#8217;s shipped).</p>

<p>Given the rules above, we start coding and come up with an interface like this. We&#8217;re showing the interface here for brevity &#8211; the implementation should be fairly obvious:</p>

<pre><code>public interface IOrder {

    void SetAddress(string streetNumber, string city, string state, string zip);

    // throw an exception if status == Shipped or Cancelled
    void Place();

    // throw an exception if status == In Progress or Cancelled
    void MarkShipped();

    // throw an exception if status == Shipped
    void Cancel();
}
</code></pre>

<p>Stop. Do you see the problem here?</p>

<p>Think ahead a little bit. We need to both persist and edit this thing in the UI. We want to obey the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a> so we don&#8217;t want to re-use our domain class for editing or persistence since those are different responsibilities. Thus, we end up with some additional classes: maybe <code>OrderRepository</code> for persisting, which has to map the attribs to a class like <code>OrderData</code> which is compatible with our ORM, and then we need to edit the thing in the UI so we make an <code>OrderViewModel</code> where we declare which fields are required in the UI. And now, we&#8217;ve got a LOT of code on our hands which in turn becomes a PITA to maintain. This is not what we hoped for when we ventured down the path of DDD. It was supposed to make our lives easier and now we have tons of code and a headache. (And possibly a heartarche depending on how passionate we are about our craft&#8230;)</p>

<p>So what did we do wrong? <em>We made the assumption that Order has to be one object.</em> It&#8217;s totally understandable &#8211; we&#8217;re making a model of an order, and in the paper world an order is one sheet of paper. However, if we naively carry the assumption that concepts map 1:1 to classes in our domain model we may well be making things worse. Here&#8217;s what we do instead:</p>

<p>The address on the order is just straight CRUD. There&#8217;s no behavior here other than validating that the required fields are there and we&#8217;ve got plenty of tools that will do this for us (e.g. DataAnnotations in the .NET world). Thus, we can use a single class to represent our persistence model all the way up to the UI. One class fills all of our needs as far as the address goes:</p>

<pre><code>public class OrderAddress {
    public Guid Id { get; set; }

    [Required]
    public string StreetNumber { get; set; }

    [Required]
    public string City { get; set; }

    [Required]
    public string State { get; set; }

    [Required]
    public string Zip { get; set; }
}
</code></pre>

<p>No need for unit tests on this class since there&#8217;s no behavior to test. We can safely assume that validation is handled correctly by our client framework (e.g. jQuery validation in ASP.NET MVC) or at worst our database. (If we can&#8217;t safely assume this we may need to consider some new tools&#8230;)</p>

<p>As for the status changes, now we end up with this (same as before, but no <code>SetAddress()</code>):</p>

<pre><code>public interface IOrderStatus {

    // throw an exception if status == Shipped or Cancelled
    void Place();

    // throw an exception if status == In Progress or Cancelled
    void MarkShipped();

    // throw an exception if status == Shipped
    void Cancel();
}
</code></pre>

<p>This also means we persist OrderAddress and OrderStatus as separate tables (or collections if you&#8217;re using a document database). Because they&#8217;re separate tables, we&#8217;ve also decreased our risk of concurrency issues in addition to making maintenance easier by decoupling. Now the code benefits from a true domain model where it&#8217;s actually helpful: where there&#8217;s behavior. And we can use plain old CRUD like we did before when there&#8217;s no behavior, just data.</p>

<p>So, we can summarize the lessons in this post in the following rules of thumb:</p>

<ol>
<li>If the current state of the data is not dependent upon the previous state of the data, then it&#8217;s simple CRUD and we do not need a domain model. We should use the same class from the DB all the way through the UI.</li>
<li>If the current state of the data is dependent upon the previous state of the data, then it&#8217;s a state machine, has behavior, and we probably will benefit from a domain model.  Our behavior should be encapsulated in a class which has all methods and no mutators (setters).</li>
<li>Break apart classes (and tables/document collections) accordingly in order to separate the state and behavior so we don&#8217;t write unnecessary code and create unnecessary coupling.</li>
</ol>


<p>This is something I wish I had understood when I started doing DDD.  I hope this post clarifies things for you and saves you some trouble.</p>
]]></content>
  </entry>
  
=======
>>>>>>> 37f8f9c359ab71de61fd5cada666254f254e6537
</feed>
